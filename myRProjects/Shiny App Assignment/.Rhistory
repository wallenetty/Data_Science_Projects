custData = data.frame(name=c("Tom", "Sally", "Sue"),
age=c(43,28,35),
stringsAsFactors = F)
custData
custData[1,1]
dim(custData)
recordMark = data.frame(name="Mark", age=33)
custData = rbind(custData, recordMark)
custData
debt = c(0,25.50, 36, 48.19)
custData = cbind(custData, debt)
custData
owesMoney = custData[custData$debt > 0]
custData
owesMoney = custData[custData$debt > 0,]
custData
num = 1
repeat{
print(num)
num  = num +1
if(num > 5){
break
}
}
x <- "Hello World!"
print(x)
x <- "Hello World!"
print(x)
y = "Hello World!"
"Hello World" -> z
x
y
z
# Implicit printing
print (x) # Explicit printing
# Assignment operators
x <- "Hello World!" # left-arrow assignment operator
# Simply type the variable and when we press enter, the value of the variable is automatically printed to the console
print(x)
x
# Creating variables
l <- TRUE
# Creating variables in R, we just assign a value to a variable
l <- TRUE # We can create a logical, that is a Boolean variable, and set its value to either true or false
i <- 123L # We can create an integer variable by setting its value to an integer and using the capital letter L suffix
# The L stands for long, which is programming language shorthand for long integer, which is a 32-bit integer
# Integers are either positive or negative, whole number values
n <- 1.23 # We can create a numeric variable by setting its value to a numeric constant
c <- "ABC 123" # We can create a character string by setting its value to a string of characters surrounded by double quotes
d <- as.Date ("2001-02-03") # We can create date and time data types in R
# Displaying variables in the console by either explicitly or implicitly printing them
# Displaying variables in the console by either explicitly or implicitly printing them
l
i
n
c
d
# Creating a function
f <- function(x) { x + 1 }
# Invoking a function
f(2)
v
# Creating a vector
v <- c(1, 2, 3);
v
# Creating a sequence vector using the sequence operato, which is the colon character
s <- 1:5
# Creating a sequence vector using the sequence operato, which is the colon character
s <- 1:5
s
# Creating a matrix. Example create a 2x3 matrix containing the values 1 through 6
m <- matrix(
data = 1:6,
nrow = 2,
ncol = 3)
m
a
# Creating an array, multi-dimensional arrays using the array keyword
a <- array(
data = 1:8,
dim = c(2, 2, 2))
a
l
# Creating a list
l <- list(TRUE, 123L, 2.34, "abc")
l
# Creating a factor, stores categories of named values
categories <-c ("Male", "Female", "Male", "Male", "Female")
factor <- factor(categories)
factor
levels(factor)
unclass(factor)
# Creating a data frame
df <- data.frame(
Name = c("Cat", "Dog", "Cow", "Pig"),
HowMany = c(5, 10, 15, 20),
IsPet = c (TRUE, TRUE, FALSE, FALSE))
df
# Indexing data frames by row and column
df[1, 2]
# Indexing data frames by row
df[1, ]
df$HowMany
# Indexing data frames by column
df[ , 2]
df[["HowMany"]]
df$HowMany
# Subsetting the data frames. Subsetting allows us to slice and dice data in very flexible ways
df[c(2, 4), ] # we can pass a vector of integers indicating each row we want returned from our data frame into the rows argument of the index operator and it will return the specified rows
df[2:4, ] # passing in a vector containing the integers 2 and 4, will return rows 2 and 4
df[c(TRUE, FALSE, TRUE, FALSE), ] # we can also pass in a vecdtor of logical values, indicating which rows we want returned or not
df[df$IsPet == TRUE, ] # we can use the equality operator to return TRUE or FALSE for each row in the database matchin a certain condition
df[df$HowMany > 10, ] # we can query all rows where HowMany is greater than 10
df[df$Name %in% c("Cat", "Cow"), ] # finding all rows matching a list of values
# R is a vectorized language
1 + 2
c(1, 2, 3) + c(2, 4, 6)
# Named vs. ordered arguments
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
m == n
n <- matrix(1:6, 2, 3)
m == n
# Named vs. ordered arguments
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
n <- matrix(1:6, 2, 3)
m == n
identical(m, n)
# Installing packages
install.packages("dplyr")
# Loading packages
library("dplyr")
# Loading packages
library("dplyr")
# Viewing help
?data.frame
# Set the working directory
setwd("C:\Data Science with R")
# Set the working directory
setwd("C:/Data Science with R")
# Set the working directory
setwd("C:/Pluralsight")
# Read a tab-delimited data file
cars <- read/table(
file = "Cars.txt",
header = TRUE,
sep = "\t",
quote = "\"")
# Read a tab-delimited data file
cars <- read.table(
file = "Cars.txt",
header = TRUE,
sep = "\t",
quote = "\"")
Cars <- read.delim("~/GitHub/Data_Science_Projects/myRProjects/Data Science with R/Cars.txt")
View(Cars)
# Peek at the data
head(cars)
# Peek at the data
head(Cars)
# Load the dplyr library
library(dplyr)
# Load the dplyr library
library(dplyr)
# Select a subset of columns
temp <- select(
.data = Cars,
Transmission,
Cylinders,
Fuel.Economy)
# Select a subset of columns
temp <- select(
.data = cars,
Transmission,
Cylinders,
Fuel.Economy)
# Select a subset of columns
temp <- select(
.data = Cars,
Transmission,
Cylinders,
Fuel.Economy)
# Inspect the results
head(temp)
(
.data = temp,
Transmission == "Automatic")
library(tidyverse)
library(tidyverse)
housing = read.csv('housing.csv')
source('~/.active-rstudio-document')
housing = read.csv('housing.csv')
library(tidyr)
# Create a data frame
df <- data.frame(
Name = c("a", "b", "c"),
Value = c(1, 2, 3))
# Display the data frame
print(df)
# Plot the data frame using default parameters
plot(df)
# Plot using default parameter order
plot(df$Name, df$Value)
# Plot using default parameter order
plot(df$Name, df$Value)
# Plot using name parameters
plot(
x = df$Name,
y = df$Value)
# Plot the data frame using default parameters
plot(df)
# Create a bar chart
barplot(
names = df$Name,
height = df$Value,
col = "skyblue",
main = "Hello WOrld",
xlab = "Name",
ylab = "Value")
# View the help files
?plot
?barplot
?par
# Install the lattice package
install.packages("lattice")
# Load the lattice package
library(lattice)
# Create a data frame
df <- data.frame(
Name = c("a","b", "c"),
Value = c(1, 2, 3))
# Plot with defaults
dotplot(
x = Value ~ Name,
data = df)
# Plot with parameters
dotplot(
x = Value ~ Name,
data = df,
main = "Hello World",
xlab = "Name",
ylab = "Value")
# Create a bar chart
barchart(
x = Value ~ Name,
data = df,
col = "skyblue",
main = "Hello World",
xlab = "Name",
ylab = "Value")
# View the help files
?barchart
?formula
# Install the ggplot2 package
install.packages("ggplot2")
# Load the ggplot2 package
library(ggplot2)
# Load the ggplot2 package
library(ggplot2)
# Install the ggplot2 package
install.packages("ggplot2")
# Load the ggplot2 package
library(ggplot2)
# Create a data frame
df <- data.frame(
Name = c("a", "b", "c"),
Value = c(1, 2, 3))
x = Name,
y = Value)) +
geom_print()
# Install the ggplot2 package
install.packages("ggplot")
# Load the ggplot2 package
library(ggplot)
# Install the ggplot2 package
install.packages("ggplot2")
# Load the ggplot2 package
library(ggplot)
# Load the ggplot2 package
library(ggplot2)
x = Name,
y = Value)) +
geom_point() +
ggtitle("Hello World") +
xlab("Name") +
ylab("Value")
stat = "identity",
fill = "skyblue") +
ggtitle("Hello World") +
xlab("Name") +
ylab("Value")
stat = "identity",
fill = "skyblue") +
ggtitle("Hello World") +
xlab("Name") +
ylab("Value")
# View the help files
?ggplot
?aes
?geom_bar
install.packages("shiny")
library(shiny)
runExample("01_hello")
install.packages("shiny")
library(shiny)
install.packages(c("askpass", "backports", "BH", "bit", "bit64", "bitops", "blob", "cachem", "caTools", "cli", "clipr", "colorspace", "commonmark", "config", "crayon", "curl", "DBI", "dbplyr", "digest", "dplyr", "ellipsis", "evaluate", "fansi", "farver", "forcats", "fs", "generics", "glue", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "later", "lattice", "magrittr", "markdown", "MASS", "Matrix", "mgcv", "mime", "mongolite", "nlme", "odbc", "openssl", "packrat", "pkgconfig", "PKI", "prettyunits", "profvis", "progress", "purrr", "r2d3", "R6", "rappdirs", "Rcpp", "RCurl", "readr", "readxl", "rJava", "RJDBC", "RJSONIO", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "sass", "sparklyr", "stringi", "stringr", "sys", "tibble", "tidyr", "tidyselect", "tinytex", "utf8", "vctrs", "withr", "xfun", "xml2", "yaml"))
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(shiny)
runExample("01_hello")
shinyApp(ui, server)
?library
install.packages("shiny")
runExample("01_hello")
library(shiny)
install.packages("shiny")
library(shiny)
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("tidyverse")
install.packages("rlang")
install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
install.packages("lifecycle")
install.packages("lifecycle")
library(tidyverse)
library(ggplot2)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
counties <- readRDS("~/GitHub/Data_Science_Projects/myRProjects/census-app/data/counties.rds")
counties <- readRDS("census-app/data/counties.rds")
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
View(counties)
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
source('~/GitHub/Data_Science_Projects/myRProjects/census-app/helpers.R')
install.packages(c("maps", "mapproj"))
source("helpers.R")
counties(head)
counties
percent_map(counties$white, "darkgreen", "% White")
View(counties)
install.packages(c("maps", "mapproj"))
shiny::runApp('GitHub/Data_Science_Projects/myRProjects/Shiny App Assignment')
install.packages("shiny")
head(iris)
library(shinydashboard)
library(plyr)dataset <-iris
library(plyr)
colMeans()
colMeans(.iris)
colMeans(iris)
colMeans(.)
head(iris)
dataset()
iris()
iris
install(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
shiny::runApp('GitHub/Data_Science_Projects/myRProjects/Shiny App Assignment')
install.packages("shiny")
shiny::runApp('GitHub/Data_Science_Projects/myRProjects/Shiny App Assignment')
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
# Install Shiny library
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
library(ggplot2)
dataset <-iris
iris
runApp()
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
